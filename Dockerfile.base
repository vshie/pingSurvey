FROM python:3.11-slim

# Install system dependencies for bathymetry map generation (ARM-optimized)
# Note: This base image uses architecture-specific wheel sources:
# - ARM32 (armv7): Uses piwheels.org (optimized for Raspberry Pi)
# - ARM64 (armv8): Uses official scipy wheels from PyPI
# - AMD64: Uses official scipy wheels from PyPI
RUN apt-get update && \
    apt-get install -y \
    gcc \
    gfortran \
    python3-dev \
    python3-pip \
    python3-venv \
    # Remove system numpy/pandas to avoid version conflicts
    # python3-pandas \
    # python3-numpy \
    python3-scipy \
    python3-matplotlib \
    python3-pil \
    python3-requests \
    python3-shapely \
    libgeos-dev \
    libproj-dev \
    proj-data \
    proj-bin \
    libgdal-dev \
    gdal-bin \
    # OpenBLAS dependencies for scipy compilation
    libopenblas-dev \
    liblapack-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and install build tools
RUN pip install --upgrade pip setuptools wheel

# Install Python dependencies with compatible versions
# Use NumPy 1.x to avoid compatibility issues with shapely and other packages
RUN pip install --no-cache-dir --prefer-binary \
    numpy==1.24.3 \
    pandas==2.0.3 \
    flask==2.3.3 \
    requests==2.28.2 \
    folium==0.12.1 \
    branca==0.4.2 \
    geojson==2.5.0 \
    mercantile==1.2.1 \
    Pillow==9.0.1 \
    shapely==2.0.1

# Method 2: Install scipy using architecture-specific wheel sources
# Use newer scipy versions that have proper ARM wheels available
# Based on piwheels availability: 1.11.1+ are available
RUN if [ "$(uname -m)" = "armv7l" ]; then \
        echo "ARM32 detected - using piwheels for scipy" && \
        pip install --no-cache-dir --prefer-binary --index-url https://www.piwheels.org/simple/ scipy==1.11.4 || \
        (echo "scipy 1.11.4 not available on piwheels, trying 1.11.3" && \
         pip install --no-cache-dir --prefer-binary --index-url https://www.piwheels.org/simple/ scipy==1.11.3) || \
        (echo "scipy 1.11.3 not available on piwheels, trying 1.11.2" && \
         pip install --no-cache-dir --prefer-binary --index-url https://www.piwheels.org/simple/ scipy==1.11.2) || \
        (echo "scipy 1.11.2 not available on piwheels, trying 1.11.1" && \
         pip install --no-cache-dir --prefer-binary --index-url https://www.piwheels.org/simple/ scipy==1.11.1) || \
        (echo "No scipy wheels available on piwheels, falling back to compilation" && \
         pip install --no-cache-dir scipy); \
    else \
        echo "ARM64/AMD64 detected - using official scipy wheels" && \
        pip install --no-cache-dir --prefer-binary scipy==1.11.4 || \
        (echo "scipy 1.11.4 wheel not available, trying 1.11.3" && \
         pip install --no-cache-dir --prefer-binary scipy==1.11.3) || \
        (echo "scipy 1.11.3 wheel not available, trying 1.11.2" && \
         pip install --no-cache-dir --prefer-binary scipy==1.11.2) || \
        (echo "scipy 1.11.2 wheel not available, trying 1.11.1" && \
         pip install --no-cache-dir --prefer-binary scipy==1.11.1) || \
        (echo "No scipy wheels available, falling back to compilation" && \
         pip install --no-cache-dir scipy); \
    fi

# Verify scipy installation with detailed error reporting
RUN python3 -c "import scipy; print(f'scipy version: {scipy.__version__}')" || \
    (echo "scipy import failed, checking what's installed:" && \
     pip list | grep -i scipy || echo "No scipy found in pip list" && \
     echo "Checking system packages:" && \
     dpkg -l | grep -i scipy || echo "No scipy found in system packages" && \
     echo "Attempting to install scipy via pip with appropriate source..." && \
     if [ "$(uname -m)" = "armv7l" ]; then \
         pip install --no-cache-dir --index-url https://www.piwheels.org/simple/ scipy==1.11.4; \
     else \
         pip install --no-cache-dir scipy==1.11.4; \
     fi && \
     python3 -c "import scipy; print(f'scipy version: {scipy.__version__}')")

# Test specific scipy functionality that we need
RUN python3 -c "from scipy.interpolate import griddata; print('scipy.interpolate import successful')" || \
    (echo "scipy.interpolate import failed, attempting to install..." && \
     if [ "$(uname -m)" = "armv7l" ]; then \
         pip install --no-cache-dir --index-url https://www.piwheels.org/simple/ scipy==1.11.4; \
     else \
         pip install --no-cache-dir scipy==1.11.4; \
     fi && \
     python3 -c "from scipy.interpolate import griddata; print('scipy.interpolate import successful')")

# Method 3: Skip contextily for now to speed up base image build (can be added later if needed)
# RUN pip install --no-cache-dir --prefer-binary contextily==1.2.0 || \
#     (echo "Contextily installation failed, using fallback method" && \
#      pip install --no-deps contextily==1.2.0 || \
#      echo "Contextily not available - maps will work without satellite background")
RUN echo "Contextily installation skipped for faster base image build"

# Create app directory structure
RUN mkdir -p /app/logs /app/static /app/contour_map_generator

# Set working directory
WORKDIR /app

# Expose port
EXPOSE 5420/tcp

# This base image is ready for application code to be copied in
# Trigger base image rebuild with multi-platform manifest 